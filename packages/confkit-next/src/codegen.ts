import fs from 'node:fs';
import path from 'node:path';

export type ClientTypesOptions = {
  file?: string;
  outFile?: string; // defaults to confkit-env.d.ts under CWD
};

function resolveOutFile(custom?: string): string {
  const fromEnv = process.env.CONFKIT_TYPES_OUT;
  const v = custom || fromEnv || 'confkit-env.d.ts';
  return path.resolve(process.cwd(), v);
}

function buildDts(keys: string[]): string {
  const lines: string[] = [];
  lines.push('// Generated by @confkit/next (auto)');
  lines.push("// Do not edit â€” edit conf/config.ts and re-run Next or 'npx confkit types'");
  const emit = (mod: string) => {
    lines.push(`declare module ${JSON.stringify(mod)} {`);
    lines.push('  const env: {');
    for (const k of keys) lines.push(`    ${JSON.stringify(k)}: string;`);
    lines.push('  };');
    lines.push('  export default env;');
    lines.push('}');
  };
  emit('confkit:client');
  emit('@confkit/next/client');
  lines.push('');
  return lines.join('\n');
}

async function computeClientKeys(confFile?: string): Promise<string[]> {
  try {
    const { loadConfig } = await (0, eval)("import('confkit/load')");
    const { clientEnv } = await loadConfig({ file: confFile });
    return Object.keys(clientEnv).sort();
  } catch {
    // Fallback: guess from process.env prefixes
    const prefixes = ['PUBLIC_', 'NEXT_PUBLIC_', 'EXPO_PUBLIC_'];
    const keys = Object.keys(process.env).filter((k) => prefixes.some((p) => k.startsWith(p)));
    return keys.sort();
  }
}

export async function generateClientTypes(opts: ClientTypesOptions = {}): Promise<void> {
  if (process.env.CONFKIT_TYPES_DISABLE === '1' || process.env.CONFKIT_TYPES_DISABLE === 'true') return;
  const keys = await computeClientKeys(opts.file);
  const outPath = resolveOutFile(opts.outFile);
  const content = buildDts(keys);
  try {
    const prev = fs.existsSync(outPath) ? fs.readFileSync(outPath, 'utf8') : '';
    if (prev === content) return;
  } catch {}
  try {
    fs.writeFileSync(outPath, content, 'utf8');
  } catch {
    // ignore write errors to avoid breaking builds
  }
}

export default generateClientTypes;

